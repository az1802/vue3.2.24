/**
 * Patch flags are optimization hints generated by the compiler.
 * when a block with dynamicChildren is encountered during diff, the algorithm
 * enters "optimized mode". In this mode, we know that the vdom is produced by
 * a render function generated by the compiler, so the algorithm only needs to
 * handle updates explicitly marked by these patch flags.
 *
 * Patch flags can be combined using the | bitwise operator and can be checked
 * using the & operator, e.g.
 *
 * ```js
 * const flag = TEXT | CLASS
 * if (flag & TEXT) { ... }
 * ```
 *
 * Check the `patchElement` function in '../../runtime-core/src/renderer.ts' to see how the
 * flags are handled during diff.
 *
 * patchFlag是在编译template模板时，给vnode添加的一个标识信息，这个标识信息反映了vnode的哪些部位绑定了动态值，
 * 这样在runtime阶段，可以根据patchFlag判断出哪些内容需要更新，实现靶向更新。
 */
export const enum PatchFlags {
  /**
   * Indicates an element with dynamic textContent (children fast path)
   * <template>
      <h1>{{ msg }}</h1>
    </template>
    patchFlag = 1
   */
  TEXT = 1, //动态文本节点

  /**
   * Indicates an element with dynamic class binding.
   * <template>
      <h1 :class='classObj'>{{ msg }}</h1>
    </template>
    patchFlag = 3
   */
  CLASS = 1 << 1,//动态class属性

  /**
   * Indicates an element with dynamic style
   * The compiler pre-compiles static string styles into static objects
   * + detects and hoists inline static objects
   * e.g. `style="color: red"` and `:style="{ color: 'red' }"` both get hoisted
   * as:
   * ```js
   * const style = { color: 'red' }
   * render() { return e('div', { style }) }
   * ```
   * <template>
      <h1 :class='classObj' :style='styleObj'>{{ msg }}</h1>
    </template>
    patchFlag = 7
   */
  STYLE = 1 << 2,//动态style属性

  /**
   * Indicates an element that has non-class/style dynamic props.
   * Can also be on a component that has any dynamic props (includes
   * class/style). when this flag is present, the vnode also has a dynamicProps
   * array that contains the keys of the props that may change so the runtime
   * can diff them faster (without having to worry about removed props)
   * <template>
  <h1 :title="msg">{{ msg }}</h1>
</template>
        patchFlag = 9 /* TEXT, PROPS

   */
  PROPS = 1 << 3,//表示具有动态的非class和style的props

  /**
   * Indicates an element with props with dynamic keys. When keys change, a full
   * diff is always needed to remove the old key. This flag is mutually
   * exclusive with CLASS, STYLE and PROPS.
   * <template>
        <h1 :[dynamicKey]="msg" >{{ msg }}</h1>
      </template>
      patchFlag = 17 TEXT, FULL_PROPS

   */
  FULL_PROPS = 1 << 4,// 表示props具有动态的key，与CLASS、STYLE、PROPS冲突

  /**
   * Indicates an element with event listeners (which need to be attached
   * during hydration)
   *
   */
  HYDRATE_EVENTS = 1 << 5, //表示有监听事件(在同构期间需要添加)

  /**
   * Indicates a fragment whose children order doesn't change.
   * <template>
      <h1 @click="handleClick" >{{ msg }}</h1>
      <span>text</span>
    </template>
    template标签 patchFlag = 64
   */
  STABLE_FRAGMENT = 1 << 6, //表示vnode是个children顺序不会改变的fragment

  /**
   * Indicates a fragment with keyed or partially keyed children
   * <template>
        <span v-for="item in data" :key="item">{{ item }}</span>
      </template>
      patchFlag = 128 KEYED_FRAGMENT
   */
  KEYED_FRAGMENT = 1 << 7, //表示children带有key的fragment

  /**
   * Indicates a fragment with unkeyed children.
   * <template>
        <span v-for="item in data" >{{ item }}</span>
      </template>
      patchFlag = 256 UNKEYED_FRAGMENT
   */
  UNKEYED_FRAGMENT = 1 << 8, //表示children没有key的fragment

  /**
   * Indicates an element that only needs non-props patching, e.g. ref or
   * directives (onVnodeXXX hooks). since every patched vnode checks for refs
   * and onVnodeXXX hooks, it simply marks the vnode so that a parent block
   * will track it.
   * <template>
      <input v-focus />
      <h1 ref="dom">Hello</h1>
    </template>
    patchFlag = 512 NEED_PATCH
   */
  NEED_PATCH = 1 << 9, // 表示vnode只需要非props的patch。例如只有标签中只有ref或指令

  /**
   * Indicates a component with dynamic slots (e.g. slot that references a v-for
   * iterated value, or dynamic slot names).
   * Components with this flag are always force updated.
   * <template>
        <Comp>
          <template #one v-if="ok">hello</template>
        </Comp>

        <Comp>
          <template v-for="name in list" #[name]>{{ name }}</template>
        </Comp>
      </template>
      两个<Comp>中的slot都可能发生变化，所以它们对应的vnode的patchFlag为 1024
   */
  DYNAMIC_SLOTS = 1 << 10,//表示vnode存在动态的插槽。例如动态的插槽名

  /**
   * Indicates a fragment that was created only because the user has placed
   * comments at the root level of a template. This is a dev-only flag since
   * comments are stripped in production.
   */
  DEV_ROOT_FRAGMENT = 1 << 11,// 表示用户在模板的根级别存在注释而创建的片段，这是一个仅用于开发的标志，因为注释在生产中被剥离

  /**
   * SPECIAL FLAGS -------------------------------------------------------------
   * Special flags are negative integers. They are never matched against using
   * bitwise operators (bitwise matching should only happen in branches where
   * patchFlag > 0), and are mutually exclusive. When checking for a special
   * flag, simply check patchFlag === FLAG.
   */

  /**
   * Indicates a hoisted static vnode. This is a hint for hydration to skip
   * the entire sub tree since static content never needs to be updated.
   * <template>
      <h1>Hello</h1>
    </template>
    const _hoisted_1 =\/*#__PURE__*\/_createElementVNode("h1", null, "Hello", -1 /* HOISTED *\/)
    patchFlag = -1
   */
  HOISTED = -1, //表示vnode经过静态提升
  /**
   * A special flag that indicates that the diffing algorithm should bail out
   * of optimized mode. For example, on block fragments created by renderSlot()
   * when encountering non-compiler generated slots (i.e. manually written
   * render functions, which should always be fully diffed)
   * OR manually cloneVNodes
   * TODO renderSlot 渲染插槽,每次都需要全量diff
   */
  BAIL = -2 //diff算法应该退出优化模式
}

/**
 * dev only flag -> name mapping
 * diff过程中根据这些标志位进行处理,patch过程中的这些标记可以优化后续diff算法处理更新时的速度
 * vnode采用位状态标记法,每一位上的0,1表示是否包含该特性,后续处理vnode节点会根据这些状态进行不同的处理
 */
export const PatchFlagNames = {
  [PatchFlags.TEXT]: `TEXT`,
  [PatchFlags.CLASS]: `CLASS`,
  [PatchFlags.STYLE]: `STYLE`,
  [PatchFlags.PROPS]: `PROPS`,
  [PatchFlags.FULL_PROPS]: `FULL_PROPS`,
  [PatchFlags.HYDRATE_EVENTS]: `HYDRATE_EVENTS`,
  [PatchFlags.STABLE_FRAGMENT]: `STABLE_FRAGMENT`,
  [PatchFlags.KEYED_FRAGMENT]: `KEYED_FRAGMENT`,
  [PatchFlags.UNKEYED_FRAGMENT]: `UNKEYED_FRAGMENT`,
  [PatchFlags.NEED_PATCH]: `NEED_PATCH`,
  [PatchFlags.DYNAMIC_SLOTS]: `DYNAMIC_SLOTS`,
  [PatchFlags.DEV_ROOT_FRAGMENT]: `DEV_ROOT_FRAGMENT`,
  [PatchFlags.HOISTED]: `HOISTED`,
  [PatchFlags.BAIL]: `BAIL`
}
